import asyncio
import httpx
import sys
from pathlib import Path

# Add parent directory to path
parent_dir = Path(__file__).parent.parent
sys.path.append(str(parent_dir))

from utils.db import reset_group_onboarding_schema

async def test_group_onboarding():
    """Test the Group Onboarding service"""
    print("🧪 Testing Group Onboarding Service...")
    
    # Reset database
    await reset_group_onboarding_schema()
    
    # Test data - using mock user IDs (in real scenario, these would be from User Onboarding)
    test_group = {
        "group_name": "Test Family Kitchen",
        "creator_user_id": "user_alice_123",
        "invited_user_ids": ["user_bob_456", "user_charlie_789"]
    }
    
    base_url = "http://localhost:8003"
    
    async with httpx.AsyncClient() as client:
        # Test 1: Health check
        print("\n🔍 Test 1: Health check...")
        try:
            response = await client.get(f"{base_url}/health")
            print(f"✅ Health check: {response.status_code} - {response.json()}")
        except Exception as e:
            print(f"❌ Health check failed: {e}")
            return
        
        # Test 2: Detailed health check
        print("\n🔍 Test 2: Detailed health check...")
        try:
            response = await client.get(f"{base_url}/health/detailed")
            print(f"✅ Detailed health: {response.status_code} - {response.json()}")
        except Exception as e:
            print(f"❌ Detailed health failed: {e}")
        
        # Test 3: Group creation
        print("\n👥 Test 3: Group creation...")
        try:
            response = await client.post(
                f"{base_url}/api/v1/create-group",
                json=test_group
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"✅ Group created successfully:")
                print(f"   Session ID: {result['onboarding_session_id']}")
                print(f"   Group ID: {result['group_id']}")
                print(f"   Group Name: {result['group_name']}")
                print(f"   Members: {result['members']}")
                
                session_id = result['onboarding_session_id']
                
                # Test 4: Check group onboarding status
                print("\n📊 Test 4: Check group onboarding status...")
                status_response = await client.get(f"{base_url}/api/v1/status/{session_id}")
                if status_response.status_code == 200:
                    status_result = status_response.json()
                    print(f"✅ Status check successful:")
                    print(f"   Group Name: {status_result['group_name']}")
                    print(f"   Status: {status_result['status']}")
                    print(f"   Total Members: {status_result['total_members']}")
                    print(f"   Created: {status_result['created_at']}")
                else:
                    print(f"❌ Status check failed: {status_response.status_code}")
                
            else:
                print(f"❌ Group creation failed: {response.status_code} - {response.text}")
                
        except Exception as e:
            print(f"❌ Group creation error: {e}")
    
    print("\n✅ Group Onboarding Service test completed!")

if __name__ == "__main__":
    asyncio.run(test_group_onboarding())
